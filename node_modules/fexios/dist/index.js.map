{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/**\r\n * Fexios\r\n * @desc Fetch based HTTP client with similar API to axios for browser and Node.js\r\n *\r\n * @license MIT\r\n * @author dragon-fish <dragon-fish@qq.com>\r\n */\r\n\r\nexport class Fexios {\r\n  protected hooks: FexiosHookStore[] = []\r\n  readonly DEFAULT_CONFIGS: FexiosConfigs = {\r\n    baseURL: '',\r\n    timeout: 60 * 1000,\r\n    credentials: 'same-origin',\r\n    headers: {},\r\n    query: {},\r\n    responseType: 'json',\r\n  }\r\n  private readonly ALL_METHODS: FexiosMethods[] = [\r\n    'get',\r\n    'post',\r\n    'put',\r\n    'patch',\r\n    'delete',\r\n    'head',\r\n    'options',\r\n    'trace',\r\n  ]\r\n  private readonly METHODS_WITHOUT_BODY: FexiosMethods[] = [\r\n    'get',\r\n    'head',\r\n    'options',\r\n    'trace',\r\n  ]\r\n\r\n  constructor(public baseConfigs: Partial<FexiosConfigs> = {}) {\r\n    this.ALL_METHODS.forEach(this.createMethodShortcut.bind(this))\r\n  }\r\n\r\n  async request<T = any>(\r\n    url: string | URL,\r\n    options?: Partial<FexiosRequestOptions>\r\n  ): Promise<FexiosFinalContext<T>> {\r\n    let ctx: FexiosContext = (options = options || {}) as any\r\n    ctx.url = url.toString()\r\n    ctx = await this.emit('beforeInit', ctx)\r\n\r\n    const baseUrlString =\r\n      options.baseURL || this.baseConfigs.baseURL || globalThis.location?.href\r\n    const baseURL = baseUrlString\r\n      ? new URL(baseUrlString, globalThis.location?.href)\r\n      : undefined\r\n    const reqURL = new URL(ctx.url.toString(), baseURL)\r\n    ctx.url = reqURL.href\r\n    ctx.baseURL = baseURL ? baseURL.href : reqURL.origin\r\n\r\n    ctx.headers = this.mergeHeaders(\r\n      this.baseConfigs.headers,\r\n      options.headers\r\n    ) as any\r\n    ctx.query = this.mergeQuery(\r\n      this.baseConfigs.query,\r\n      reqURL.searchParams,\r\n      options.query\r\n    )\r\n\r\n    reqURL.search = new URLSearchParams(ctx.query as any).toString()\r\n    ctx.url = reqURL.toString()\r\n\r\n    if (\r\n      this.METHODS_WITHOUT_BODY.includes(\r\n        ctx.method?.toLocaleLowerCase() as FexiosMethods\r\n      ) &&\r\n      ctx.body\r\n    ) {\r\n      throw new FexiosError(\r\n        'BODY_NOT_ALLOWED',\r\n        `Request method \"${ctx.method}\" does not allow body`\r\n      )\r\n    }\r\n\r\n    ctx = await this.emit('beforeRequest', ctx)\r\n\r\n    let body: string | FormData | URLSearchParams | Blob | undefined\r\n    if (typeof ctx.body !== 'undefined' && ctx.body !== null) {\r\n      // Automatically transform JSON object to JSON string\r\n      if (\r\n        ctx.body instanceof Blob ||\r\n        ctx.body instanceof FormData ||\r\n        ctx.body instanceof URLSearchParams\r\n      ) {\r\n        body = ctx.body\r\n      } else if (typeof ctx.body === 'object') {\r\n        body = JSON.stringify(ctx.body)\r\n        ;(ctx.headers as any)['content-type'] =\r\n          'application/json; charset=UTF-8'\r\n      } else {\r\n        body = ctx.body\r\n      }\r\n    }\r\n\r\n    // Adjust content-type header\r\n    if (!(options.headers as any)?.['content-type'] && body) {\r\n      // If body is FormData or URLSearchParams, simply delete content-type header to let Request constructor handle it\r\n      if (!(body instanceof FormData || body instanceof URLSearchParams)) {\r\n        delete (ctx.headers as any)['content-type']\r\n      }\r\n      // If body is a string and ctx.body is an object, it means ctx.body is a JSON string\r\n      else if (typeof body === 'string' && typeof ctx.body === 'object') {\r\n        ;(ctx.headers as any)['content-type'] =\r\n          'application/json; charset=UTF-8'\r\n      }\r\n      // If body is a Blob, set content-type header to the Blob's type\r\n      else if (body instanceof Blob) {\r\n        ;(ctx.headers as any)['content-type'] = body.type\r\n      }\r\n    }\r\n\r\n    ctx.body = body\r\n    ctx = await this.emit('afterBodyTransformed', ctx)\r\n\r\n    const abortController =\r\n      ctx.abortController || globalThis.AbortController\r\n        ? new AbortController()\r\n        : undefined\r\n    const rawRequest = new Request(ctx.url, {\r\n      method: ctx.method || 'GET',\r\n      credentials: ctx.credentials,\r\n      headers: ctx.headers,\r\n      body: ctx.body as any,\r\n      signal: abortController?.signal,\r\n    })\r\n    ctx.rawRequest = rawRequest\r\n\r\n    ctx = await this.emit('beforeActualFetch', ctx)\r\n\r\n    const timeout = ctx.timeout || this.baseConfigs.timeout || 60 * 1000\r\n    const timer = setTimeout(() => {\r\n      abortController?.abort()\r\n      if (!abortController) {\r\n        throw new FexiosError(\r\n          'TIMEOUT',\r\n          `Request timed out after ${timeout}ms`,\r\n          ctx\r\n        )\r\n      }\r\n    }, timeout)\r\n    const rawResponse = await fetch(ctx.rawRequest!)\r\n      .catch((err) => {\r\n        throw new FexiosError('NETWORK_ERROR', err.message, ctx)\r\n      })\r\n      .finally(() => {\r\n        clearTimeout(timer)\r\n      })\r\n\r\n    ctx.rawResponse = rawResponse\r\n    ctx.response = await createFexiosResponse(rawResponse, ctx.responseType)\r\n    ctx.data = ctx.response.data\r\n    ctx.headers = ctx.response.headers\r\n\r\n    return this.emit('afterResponse', ctx) as any\r\n  }\r\n\r\n  mergeQuery(\r\n    base: Record<string, any> | string | URLSearchParams | undefined,\r\n    ...income: (Record<string, any> | string | URLSearchParams | undefined)[]\r\n  ): Record<string, any> {\r\n    const baseQuery = new URLSearchParams(base)\r\n    for (const incomeQuery of income) {\r\n      const params = new URLSearchParams(incomeQuery)\r\n      params.forEach((value, key) => {\r\n        baseQuery.set(key, value)\r\n      })\r\n    }\r\n    return Object.fromEntries(baseQuery)\r\n  }\r\n  mergeHeaders(\r\n    base: Record<string, any> | Headers | undefined,\r\n    ...income: (Record<string, any> | Headers | undefined)[]\r\n  ): Record<string, any> {\r\n    const headersObject: any = {}\r\n    const baseHeaders = new Headers(base)\r\n    for (const incomeHeaders of income) {\r\n      const header = new Headers(incomeHeaders)\r\n      header.forEach((value, key) => {\r\n        baseHeaders.set(key, value)\r\n      })\r\n    }\r\n    baseHeaders.forEach((value, key) => {\r\n      headersObject[key] = value\r\n    })\r\n    return headersObject\r\n  }\r\n\r\n  async emit<C = FexiosContext>(event: FexiosLifecycleEvents, ctx: C) {\r\n    const hooks = this.hooks.filter((hook) => hook.event === event)\r\n    try {\r\n      let index = 0\r\n      for (const hook of hooks) {\r\n        const hookName = `${event}#${hook.action.name || index}`\r\n\r\n        // Set a symbol to check if the hook overrides the original context\r\n        const symbol = Symbol('FexiosHookContext')\r\n        ;(ctx as any).__hook_symbol__ = symbol\r\n\r\n        const newCtx = await (hook.action.bind(this) as FexiosHook<C>)(ctx)\r\n\r\n        // Check if the hook overrides the original context\r\n        if ((ctx as any).__hook_symbol__ !== symbol) {\r\n          throw new FexiosError(\r\n            'HOOK_CONTEXT_CHANGED',\r\n            `Hook \"${hookName}\" should not override the original FexiosContext object.`\r\n          )\r\n        }\r\n\r\n        // Excepted abort signal\r\n        if (newCtx === false) {\r\n          throw new FexiosError(\r\n            'ABORTED_BY_HOOK',\r\n            `Request aborted by hook \"${hookName}\"`,\r\n            ctx as FexiosContext\r\n          )\r\n        }\r\n        // Good\r\n        else if (\r\n          typeof newCtx === 'object' &&\r\n          (newCtx as any).__hook_symbol__ === symbol\r\n        ) {\r\n          ctx = newCtx as C\r\n        }\r\n        // Unexpected return value\r\n        else {\r\n          // @ts-ignore prevent esbuild optimize\r\n          const console = globalThis[''.concat('console')]\r\n          try {\r\n            throw new FexiosError(\r\n              'UNEXPECTED_HOOK_RETURN',\r\n              `Hook \"${hookName}\" should return the original FexiosContext or return false to abort the request, but got \"${newCtx}\".`\r\n            )\r\n          } catch (e: any) {\r\n            console.warn(e.stack || e)\r\n          }\r\n        }\r\n\r\n        // Clean up\r\n        delete (ctx as any).__hook_symbol__\r\n\r\n        index++\r\n      }\r\n    } catch (e) {\r\n      return Promise.reject(e)\r\n    }\r\n    return ctx\r\n  }\r\n  on<C = FexiosContext>(\r\n    event: FexiosLifecycleEvents,\r\n    action: FexiosHook<C>,\r\n    prepend = false\r\n  ) {\r\n    if (typeof action !== 'function') {\r\n      throw new FexiosError(\r\n        'INVALID_HOOK_CALLBACK',\r\n        `Hook \"${action}\" should be a function, but got \"${typeof action}\"`\r\n      )\r\n    }\r\n    this.hooks[prepend ? 'unshift' : 'push']({\r\n      event,\r\n      action: action as FexiosHook,\r\n    })\r\n    return this\r\n  }\r\n\r\n  private createInterceptor<T extends FexiosLifecycleEvents>(\r\n    event: T\r\n  ): FexiosInterceptor {\r\n    return {\r\n      handlers: () =>\r\n        this.hooks\r\n          .filter((hook) => hook.event === event)\r\n          .map((hook) => hook.action),\r\n      use: <C = FexiosContext>(hook: FexiosHook<C>, prepend = false) => {\r\n        return this.on(event, hook, prepend)\r\n      },\r\n      clear: () => {\r\n        this.hooks = this.hooks.filter((hook) => hook.event !== event)\r\n      },\r\n    }\r\n  }\r\n  readonly interceptors: FexiosInterceptors = {\r\n    request: this.createInterceptor('beforeRequest'),\r\n    response: this.createInterceptor('afterResponse'),\r\n  }\r\n\r\n  private createMethodShortcut(method: FexiosMethods) {\r\n    Object.defineProperty(this, method, {\r\n      value: (\r\n        url: string | URL,\r\n        bodyOrQuery?: Record<string, any> | string | URLSearchParams,\r\n        options?: Partial<FexiosRequestOptions>\r\n      ) => {\r\n        if (\r\n          this.METHODS_WITHOUT_BODY.includes(\r\n            method.toLocaleLowerCase() as FexiosMethods\r\n          )\r\n        ) {\r\n          options = bodyOrQuery as any\r\n        } else {\r\n          options = options || {}\r\n          options.body = bodyOrQuery\r\n        }\r\n        return this.request(url, {\r\n          ...options,\r\n          method: method as FexiosMethods,\r\n        })\r\n      },\r\n    })\r\n    return this\r\n  }\r\n\r\n  extends(configs: Partial<FexiosConfigs>) {\r\n    const fexios = new Fexios({ ...this.baseConfigs, ...configs })\r\n    fexios.hooks = [...this.hooks]\r\n    return fexios\r\n  }\r\n\r\n  create = Fexios.create\r\n  static create(configs?: Partial<FexiosConfigs>) {\r\n    return new Fexios(configs)\r\n  }\r\n}\r\n\r\n// declare method shortcuts\r\nexport interface Fexios {\r\n  get: FexiosRequestShortcut<'get'>\r\n  post: FexiosRequestShortcut<'post'>\r\n  put: FexiosRequestShortcut<'put'>\r\n  patch: FexiosRequestShortcut<'patch'>\r\n  delete: FexiosRequestShortcut<'delete'>\r\n  head: FexiosRequestShortcut<'head'>\r\n  options: FexiosRequestShortcut<'options'>\r\n  trace: FexiosRequestShortcut<'trace'>\r\n}\r\n\r\nexport class FexiosError extends Error {\r\n  name = 'FexiosError'\r\n  constructor(\r\n    public code: string,\r\n    message?: string,\r\n    public context?: FexiosContext\r\n  ) {\r\n    super(message)\r\n  }\r\n}\r\nexport class FexiosResponseError<T> extends FexiosError {\r\n  name = 'FexiosResponseError'\r\n  constructor(message: string, public response: FexiosResponse<T>) {\r\n    super(response.statusText, message)\r\n  }\r\n}\r\n/**\r\n * Check if the error is a FexiosError that not caused by Response error\r\n */\r\nexport const isFexiosError = (e: any): boolean => {\r\n  return !(e instanceof FexiosResponseError) && e instanceof FexiosError\r\n}\r\n\r\nexport async function createFexiosResponse<T = any>(\r\n  rawResponse: Response,\r\n  contentType = 'json'\r\n): Promise<FexiosResponse<T>> {\r\n  let data: T\r\n  if (contentType === 'blob') {\r\n    data = (await rawResponse\r\n      .clone()\r\n      .blob()\r\n      .catch(() => {\r\n        // do nothing\r\n      })) as T\r\n  }\r\n  // @ts-expect-error\r\n  if (!data) {\r\n    data = (await rawResponse\r\n      .clone()\r\n      .json()\r\n      .catch(() => {\r\n        return rawResponse.clone().text()\r\n      })) as T\r\n  }\r\n\r\n  const response: FexiosResponse<T> = {\r\n    rawResponse,\r\n    data,\r\n    ok: rawResponse.ok,\r\n    status: rawResponse.status,\r\n    statusText: rawResponse.statusText,\r\n    headers: rawResponse.headers,\r\n  }\r\n\r\n  if (!rawResponse.ok) {\r\n    throw new FexiosResponseError(\r\n      `Request failed with status code ${rawResponse.status}`,\r\n      response as any\r\n    )\r\n  }\r\n  return response\r\n}\r\n\r\n// Support for direct import\r\nexport default createFexios()\r\nexport function createFexios(configs?: Partial<FexiosConfigs>) {\r\n  return Fexios.create(configs)\r\n}\r\n// Set global fexios instance for browser\r\ndeclare global {\r\n  interface Window {\r\n    fexios: Fexios\r\n  }\r\n}\r\nif (typeof window !== 'undefined') {\r\n  window.fexios = createFexios()\r\n}\r\n\r\nexport type AwaitAble<T = unknown> = Promise<T> | T\r\nexport interface FexiosConfigs {\r\n  baseURL: string\r\n  timeout: number\r\n  query: Record<string, string | number | boolean> | URLSearchParams\r\n  headers: Record<string, string> | Headers\r\n  credentials: 'omit' | 'same-origin' | 'include'\r\n  responseType: 'json' | 'blob' | 'text'\r\n}\r\nexport interface FexiosRequestOptions extends FexiosConfigs {\r\n  method?: FexiosMethods\r\n  body?: Record<string, any> | string | FormData | URLSearchParams\r\n  abortController?: AbortController\r\n}\r\nexport interface FexiosContext<T = any> extends FexiosRequestOptions {\r\n  url: string\r\n  rawRequest?: Request\r\n  rawResponse?: Response\r\n  response?: FexiosResponse\r\n  data?: T\r\n}\r\nexport type FexiosFinalContext<T = any> = Omit<\r\n  FexiosContext<T>,\r\n  'rawResponse' | 'response' | 'data' | 'headers'\r\n> & {\r\n  rawResponse: Response\r\n  response: FexiosResponse<T>\r\n  headers: Headers\r\n  data: T\r\n}\r\nexport interface FexiosResponse<T = any> {\r\n  rawResponse: Response\r\n  ok: boolean\r\n  status: number\r\n  statusText: string\r\n  headers: Headers\r\n  data: T\r\n}\r\nexport type FexiosHook<C = unknown> = (context: C) => AwaitAble<C | false>\r\nexport interface FexiosHookStore {\r\n  event: FexiosLifecycleEvents\r\n  action: FexiosHook\r\n}\r\nexport type FexiosLifecycleEvents =\r\n  | 'beforeInit'\r\n  | 'beforeRequest'\r\n  | 'afterBodyTransformed'\r\n  | 'beforeActualFetch'\r\n  | 'afterResponse'\r\nexport interface FexiosHooksNameMap {\r\n  beforeInit: FexiosContext\r\n  beforeRequest: FexiosContext\r\n  afterBodyTransformed: FexiosContext\r\n  beforeActualFetch: FexiosContext\r\n  afterResponse: FexiosFinalContext\r\n}\r\nexport interface FexiosInterceptor {\r\n  handlers: () => FexiosHook[]\r\n  use: <C = FexiosContext>(hook: FexiosHook<C>, prepend?: boolean) => Fexios\r\n  clear: () => void\r\n}\r\nexport interface FexiosInterceptors {\r\n  request: FexiosInterceptor\r\n  response: FexiosInterceptor\r\n}\r\n\r\ntype LowerAndUppercase<T extends string> = Lowercase<T> | Uppercase<T>\r\nexport type FexiosMethods = LowerAndUppercase<\r\n  'get' | 'post' | 'put' | 'patch' | 'delete' | 'head' | 'options' | 'trace'\r\n>\r\n\r\ntype MethodsWithoutBody = LowerAndUppercase<\r\n  'get' | 'head' | 'options' | 'trace'\r\n>\r\nexport type FexiosRequestShortcut<M extends FexiosMethods> =\r\n  M extends MethodsWithoutBody ? ShortcutWithoutBody : ShortcutWithBody\r\ntype ShortcutWithoutBody = <T = any>(\r\n  url: string | URL,\r\n  options?: Partial<FexiosRequestOptions>\r\n) => Promise<FexiosFinalContext<T>>\r\ntype ShortcutWithBody = <T = any>(\r\n  url: string | URL,\r\n  body?: Record<string, any> | string | URLSearchParams | FormData | null,\r\n  options?: Partial<FexiosRequestOptions>\r\n) => Promise<FexiosFinalContext<T>>\r\n"],"names":["Fexios","baseConfigs","url","options","_a","_b","_c","_d","ctx","baseUrlString","baseURL","reqURL","FexiosError","body","abortController","rawRequest","timeout","timer","rawResponse","err","createFexiosResponse","base","income","baseQuery","incomeQuery","value","key","headersObject","baseHeaders","incomeHeaders","event","hooks","hook","index","hookName","symbol","newCtx","console","e","action","prepend","method","bodyOrQuery","configs","fexios","code","message","context","FexiosResponseError","response","isFexiosError","contentType","data","createFexios"],"mappings":"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"}