/**
 * Fexios
 * @desc Fetch based HTTP client with similar API to axios for browser and Node.js
 *
 * @license MIT
 * @author dragon-fish <dragon-fish@qq.com>
 */
export declare class Fexios {
    baseConfigs: Partial<FexiosConfigs>;
    protected hooks: FexiosHookStore[];
    readonly DEFAULT_CONFIGS: FexiosConfigs;
    private readonly ALL_METHODS;
    private readonly METHODS_WITHOUT_BODY;
    constructor(baseConfigs?: Partial<FexiosConfigs>);
    request<T = any>(url: string | URL, options?: Partial<FexiosRequestOptions>): Promise<FexiosFinalContext<T>>;
    mergeQuery(base: Record<string, any> | string | URLSearchParams | undefined, ...income: (Record<string, any> | string | URLSearchParams | undefined)[]): Record<string, any>;
    mergeHeaders(base: Record<string, any> | Headers | undefined, ...income: (Record<string, any> | Headers | undefined)[]): Record<string, any>;
    emit<C = FexiosContext>(event: FexiosLifecycleEvents, ctx: C): Promise<C>;
    on<C = FexiosContext>(event: FexiosLifecycleEvents, action: FexiosHook<C>, prepend?: boolean): this;
    private createInterceptor;
    readonly interceptors: FexiosInterceptors;
    private createMethodShortcut;
    extends(configs: Partial<FexiosConfigs>): Fexios;
    create: typeof Fexios.create;
    static create(configs?: Partial<FexiosConfigs>): Fexios;
}
export interface Fexios {
    get: FexiosRequestShortcut<'get'>;
    post: FexiosRequestShortcut<'post'>;
    put: FexiosRequestShortcut<'put'>;
    patch: FexiosRequestShortcut<'patch'>;
    delete: FexiosRequestShortcut<'delete'>;
    head: FexiosRequestShortcut<'head'>;
    options: FexiosRequestShortcut<'options'>;
    trace: FexiosRequestShortcut<'trace'>;
}
export declare class FexiosError extends Error {
    code: string;
    context?: FexiosContext | undefined;
    name: string;
    constructor(code: string, message?: string, context?: FexiosContext | undefined);
}
export declare class FexiosResponseError<T> extends FexiosError {
    response: FexiosResponse<T>;
    name: string;
    constructor(message: string, response: FexiosResponse<T>);
}
/**
 * Check if the error is a FexiosError that not caused by Response error
 */
export declare const isFexiosError: (e: any) => boolean;
export declare function createFexiosResponse<T = any>(rawResponse: Response, contentType?: string): Promise<FexiosResponse<T>>;
declare const _default: Fexios;
export default _default;
export declare function createFexios(configs?: Partial<FexiosConfigs>): Fexios;
declare global {
    interface Window {
        fexios: Fexios;
    }
}
export type AwaitAble<T = unknown> = Promise<T> | T;
export interface FexiosConfigs {
    baseURL: string;
    timeout: number;
    query: Record<string, string | number | boolean> | URLSearchParams;
    headers: Record<string, string> | Headers;
    credentials: 'omit' | 'same-origin' | 'include';
    responseType: 'json' | 'blob' | 'text';
}
export interface FexiosRequestOptions extends FexiosConfigs {
    method?: FexiosMethods;
    body?: Record<string, any> | string | FormData | URLSearchParams;
    abortController?: AbortController;
}
export interface FexiosContext<T = any> extends FexiosRequestOptions {
    url: string;
    rawRequest?: Request;
    rawResponse?: Response;
    response?: FexiosResponse;
    data?: T;
}
export type FexiosFinalContext<T = any> = Omit<FexiosContext<T>, 'rawResponse' | 'response' | 'data' | 'headers'> & {
    rawResponse: Response;
    response: FexiosResponse<T>;
    headers: Headers;
    data: T;
};
export interface FexiosResponse<T = any> {
    rawResponse: Response;
    ok: boolean;
    status: number;
    statusText: string;
    headers: Headers;
    data: T;
}
export type FexiosHook<C = unknown> = (context: C) => AwaitAble<C | false>;
export interface FexiosHookStore {
    event: FexiosLifecycleEvents;
    action: FexiosHook;
}
export type FexiosLifecycleEvents = 'beforeInit' | 'beforeRequest' | 'afterBodyTransformed' | 'beforeActualFetch' | 'afterResponse';
export interface FexiosHooksNameMap {
    beforeInit: FexiosContext;
    beforeRequest: FexiosContext;
    afterBodyTransformed: FexiosContext;
    beforeActualFetch: FexiosContext;
    afterResponse: FexiosFinalContext;
}
export interface FexiosInterceptor {
    handlers: () => FexiosHook[];
    use: <C = FexiosContext>(hook: FexiosHook<C>, prepend?: boolean) => Fexios;
    clear: () => void;
}
export interface FexiosInterceptors {
    request: FexiosInterceptor;
    response: FexiosInterceptor;
}
type LowerAndUppercase<T extends string> = Lowercase<T> | Uppercase<T>;
export type FexiosMethods = LowerAndUppercase<'get' | 'post' | 'put' | 'patch' | 'delete' | 'head' | 'options' | 'trace'>;
type MethodsWithoutBody = LowerAndUppercase<'get' | 'head' | 'options' | 'trace'>;
export type FexiosRequestShortcut<M extends FexiosMethods> = M extends MethodsWithoutBody ? ShortcutWithoutBody : ShortcutWithBody;
type ShortcutWithoutBody = <T = any>(url: string | URL, options?: Partial<FexiosRequestOptions>) => Promise<FexiosFinalContext<T>>;
type ShortcutWithBody = <T = any>(url: string | URL, body?: Record<string, any> | string | URLSearchParams | FormData | null, options?: Partial<FexiosRequestOptions>) => Promise<FexiosFinalContext<T>>;
