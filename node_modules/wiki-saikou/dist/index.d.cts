import { Ref } from '@vue/reactivity';
import { Fexios, FexiosConfigs, FexiosRequestOptions, FexiosFinalContext } from 'fexios';
export declare class MediaWikiApi {
    baseURL: Ref<string>;
    private requestHandlerRef;
    private defaultOptionsRef;
    private defaultParamsRef;
    private tokens;
    cookies: Record<string, string>;
    constructor(baseURL?: string, options?: Partial<FexiosConfigs>);
    static normalizeParamValue(item: MwApiParams[keyof MwApiParams]): string | File | undefined;
    static createRequestHandler(baseURL: string, options?: Partial<FexiosRequestOptions>): Fexios;
    /** Syntactic Sugar */
    get request(): Fexios;
    get defaultOptions(): Partial<FexiosConfigs>;
    set defaultOptions(options: Partial<FexiosConfigs>);
    get defaultParams(): MwApiParams;
    set defaultParams(params: MwApiParams);
    /** Base methods encapsulation */
    get<T = any>(query: MwApiParams, options?: FexiosRequestOptions): Promise<FexiosFinalContext<T>>;
    post<T = any>(data: MwApiParams | URLSearchParams | FormData, options?: FexiosRequestOptions): Promise<FexiosFinalContext<T>>;
    login(lgname: string, lgpassword: string, params?: MwApiParams, postOptions?: {
        retry?: number;
        noCache?: boolean;
    }): Promise<{
        result: 'Success' | 'NeedToken' | 'WrongToken' | 'Failed';
        token?: string;
        reason?: {
            code: string;
            text: string;
        };
        lguserid: number;
        lgusername: string;
    }>;
    getUserInfo(): Promise<{
        id: number;
        name: string;
        groups: string[];
        rights: string[];
        blockid?: number;
        blockedby?: string;
        blockedbyid?: number;
        blockreason?: string;
        blockexpiry?: string;
        blockedtimestamp?: string;
    }>;
    /** Token Handler */
    getTokens(type?: MwTokenName[]): Promise<Record<string, string>>;
    token(type?: MwTokenName, noCache?: boolean): Promise<string>;
    postWithToken<T = any>(tokenType: MwTokenName, body: MwApiParams, options?: {
        tokenName?: string;
        retry?: number;
        noCache?: boolean;
    }): Promise<FexiosFinalContext<T>>;
    postWithEditToken<T = any>(body: MwApiParams): Promise<FexiosFinalContext<T>>;
    static isBadTokenError(data?: any): any;
    getMessages(ammessages: string[], amlang: string | undefined, options: MwApiParams): Promise<Record<string, string>>;
    parseWikitext(wikitext: string, title?: string, extraBody?: MwApiParams, options?: FexiosRequestOptions): Promise<string>;
}
export declare class MediaWikiForeignApi extends MediaWikiApi {
    constructor(baseURL?: string, options?: Partial<FexiosConfigs>);
}
export default MediaWikiApi;
export { MediaWikiApi as MwApi, MediaWikiForeignApi as ForeignApi };
export declare enum WikiSaikouErrorCode {
    HTTP_ERROR = "HTTP_ERROR",
    LOGIN_FAILED = "LOGIN_FAILED",
    LOGIN_RETRY_LIMIT_EXCEEDED = "LOGIN_RETRY_LIMIT_EXCEEDED",
    TOKEN_RETRY_LIMIT_EXCEEDED = "TOKEN_RETRY_LIMIT_EXCEEDED"
}
export declare class WikiSaikouError extends Error {
    readonly code: WikiSaikouErrorCode;
    readonly message: string;
    readonly cause?: FexiosFinalContext | undefined;
    readonly name = "WikiSaikouError";
    constructor(code: WikiSaikouErrorCode, message?: string, cause?: FexiosFinalContext | undefined);
}
export type MwApiParams = Record<string, string | number | string[] | undefined | boolean | File>;
export type MwTokenName = 'createaccount' | 'csrf' | 'login' | 'patrol' | 'rollback' | 'userrights' | 'watch';
